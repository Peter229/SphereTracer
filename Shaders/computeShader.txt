#version 450
precision mediump float;
layout (local_size_x = 1, local_size_y = 1) in;

layout (rgba32f, binding = 0) uniform image2D img_output;

uniform vec3 pos;
uniform vec3 dir;
uniform vec3 up;
uniform vec3 right;

uniform float time;

#define MAX_STEPS 100
#define MAX_DIST 100.
#define SURF_DIST 0.01

float smoothMin(float dstA, float dstB, float k) {
	
	float h = max(k-abs(dstA-dstB), 0) / k;
	return min(dstA, dstB) - h*h*h*k*1/6.0;
}

float getDist(vec3 p){

	vec4 s = vec4(0, sin(time) * 2, 6, 1);

	float sphereDist = length(p-s.xyz)-s.w;
	float planeDist = p.y;

	float d = smoothMin(sphereDist, planeDist, 2.0);
	//float d = min(sphereDist, planeDist);
	return d;
}

float rayMarch(vec3 ro, vec3 rd) {
	
	float d0 = 0.0;

	for (int i = 0; i < MAX_STEPS; i++) {
		
		vec3 p = ro + rd*d0;

		float dS = getDist(p);

		d0 += dS;

		if (d0 > MAX_DIST || dS < SURF_DIST) break;
	}

	return d0;
}

vec3 getNormal(vec3 p) {

	float d = getDist(p);
	vec2 e = vec2(0.01, 0);

	vec3 n = d - vec3(getDist(p - e.xyy), getDist(p - e.yxy), getDist(p - e.yyx));

	return normalize(n);
}

float getLight(vec3 p) {

	vec3 lightPos = vec3(0, 5, 6);
	lightPos.xz += vec2(sin(time), cos(time)) * 2.0;
	vec3 l = normalize(lightPos - p);
	vec3 n = getNormal(p);

	float dif = dot(n, l);
	float d = rayMarch(p + n * SURF_DIST*2.0, l);
	if (d < length(lightPos - p)){
		dif *= 0.1;
	}
	return dif;
}

float sphOcclusion(vec3 pos, vec3 nor, vec4 sph)
{
    vec3  r = sph.xyz - pos;
    float l = length(r);
    return dot(nor,r)*(sph.w*sph.w)/(l*l*l);
}

void main() {
	
	//Base pixel colour
	vec4 pixel = vec4(0.0, 0.0, 0.0, 1.0);

	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);

	ivec2 size = imageSize(img_output);
	if (pixel_coords.x >= size.x || pixel_coords.y >= size.y) {
		return;
	}

	//Drawing here
	//https://www.youtube.com/watch?v=ggHSrlrP5zI

	int width = 800;
	int height = 600;
	float aspectRatio = float(width) / float(height);

	float fov = 45.0;
	float h = tan(fov);
	float w = h * aspectRatio;

	float xx = (2.0 * pixel_coords.x) / width - 1.0;
	float yy = (-2.0 * pixel_coords.y) / height + 1.0;

	vec3 rayd = normalize(dir + xx * w * right + yy * h * -up);
	vec3 rayo = pos;

	float d = rayMarch(rayo, rayd);

	vec3 p = rayo + rayd * d;

	float dif = getLight(p);
	vec3 col = vec3(dif);

	pixel = vec4(col, 1.0);

	//float test = sphOcclusion(pos, rayd, vec4(0.0, 0.0, -10.0, 1.0));
	//if (test > 0) {

	//	vec3 spherec = vec3(0.0, 0.0, -10.0);
	//	float spherer = 1.0;

	//	vec3 omc = rayo - spherec;
	//	float b = dot(rayd, omc);
	//	float c = dot(omc, omc) - spherer * spherer;
	//	float bsqmc  = b * b - c;
	//	if (bsqmc >= 0.0){
	//		float fin = -b - sqrt(h);
	//		vec3 intpos = rayo + fin * rayd;
	//		vec3 nor = normalize(intpos - spherec);
	//		vec3 col = vec3(0.4, 0.4, 1.0);
	//		vec3 lig = normalize(vec3(0.6,0.3,0.4));
	//		col *= clamp(dot(nor,lig), 0.0, 1.0);
	//		pixel = vec4(col, 1.0);
	//	}
	//}

	imageStore(img_output, pixel_coords, pixel);
}